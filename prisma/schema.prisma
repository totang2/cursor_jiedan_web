generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  password     String
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         String        @default("user")  // 建议修改为使用UserRole枚举
  status       UserStatus    @default(ACTIVE)  // 新增状态字段
  applications Application[]
  profile      Profile?
  projects     Project[]     @relation("ProjectOwner")
  skills       Skill[]       @relation("SkillToUser")
  messages     Message[]
  chats        Chat[]        @relation("ChatUsers")
  orders       Order[]
}

// 新增用户状态枚举
enum UserStatus {
  ACTIVE
  BLOCKED
  BANNED
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  avatar      String?
  location    String?
  website     String?
  github      String?
  linkedin    String?
  hourlyRate  Float?
  currency    String   @default("USD")
  availability Boolean? // 从String?改为Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Project {
  id           String        @id @default(cuid())
  title        String
  description  String
  budget       Float
  currency     String        @default("USD")
  deadline     DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  category     String
  clientId     String
  skills       String[]
  status       ProjectStatus @default(OPEN)
  source       String?       // 项目来源，如upwork、freelancer、programinn
  originalLink String?       // 原始项目链接
  applications Application[]
  client       User          @relation("ProjectOwner", fields: [clientId], references: [id])
  orders       Order[]
}

model Application {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String?
  status    String   @default("pending")
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Skill {
  id        String   @id @default(cuid())
  name      String   @unique
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("SkillToUser")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  chatId    String
  senderId  String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
}

model Chat {
  id        String    @id @default(cuid())
  messages  Message[]
  users     User[]    @relation("ChatUsers")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([updatedAt])
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  projectId     String
  amount        Float
  currency      String        @default("USD")
  status        OrderStatus   @default(PENDING)
  paymentMethod String?
  paymentId     String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  project       Project       @relation(fields: [projectId], references: [id])
  payment       Payment?
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  transactionId String?       @unique
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
}

enum UserRole {
  DEVELOPER
  CLIENT
  ADMIN
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
