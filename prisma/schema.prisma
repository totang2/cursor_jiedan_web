// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(DEVELOPER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  projects      Project[] @relation("ProjectOwner")
  applications  Application[]
  skills        Skill[]
  reviews       Review[]  @relation("ReviewAuthor")
  receivedReviews Review[] @relation("ReviewTarget")
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  bio         String?
  avatar      String?
  location    String?
  website     String?
  github      String?
  linkedin    String?
  hourlyRate  Float?
  availability Boolean  @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String
  budget      Float
  deadline    DateTime?
  status      ProjectStatus @default(OPEN)
  ownerId     String
  owner       User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  applications Application[]
  skills      Skill[]
}

model Application {
  id          String    @id @default(cuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  proposal    String
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Skill {
  id          String    @id @default(cuid())
  name        String    @unique
  users       User[]
  projects    Project[]
}

model Review {
  id          String    @id @default(cuid())
  rating      Int
  comment     String?
  authorId    String
  author      User      @relation("ReviewAuthor", fields: [authorId], references: [id])
  targetId    String
  target      User      @relation("ReviewTarget", fields: [targetId], references: [id])
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum UserRole {
  DEVELOPER
  CLIENT
  ADMIN
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
} 