generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  password     String
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         String        @default("user")
  applications Application[]
  profile      Profile?
  projects     Project[]     @relation("ProjectOwner")
  skills       Skill[]       @relation("SkillToUser")
  messages     Message[]
  chats        Chat[]        @relation("ChatUsers")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  avatar    String?
  location  String?
  website   String?
  github    String?
  linkedin  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Project {
  id           String        @id @default(cuid())
  title        String
  description  String
  budget       Float
  deadline     DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  category     String
  clientId     String
  skills       String[]
  status       ProjectStatus @default(OPEN)
  applications Application[]
  client       User          @relation("ProjectOwner", fields: [clientId], references: [id])
}

model Application {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String?
  status    String   @default("pending")
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Skill {
  id        String   @id @default(cuid())
  name      String   @unique
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("SkillToUser")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  chatId    String
  senderId  String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
}

model Chat {
  id        String    @id @default(cuid())
  messages  Message[]
  users     User[]    @relation("ChatUsers")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([updatedAt])
}

enum UserRole {
  DEVELOPER
  CLIENT
  ADMIN
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
